Description: >
  This template deploys the infrastructure pipeline

Parameters:

  InfraDir:
    Description: Please enter the folder name where infrastructure templates will be stored on S3 Bucket
    Type: String
    Default: infrastructure

  ProjectName:
    Description: An environment name that will be used all over solution arch
    Type: String
    Default: BlueHarvest

  ContainerName:
    Description: Please enter a container name for your Application
    Type: String
    Default: Nginx

  RepositoryName:
    Description: The name of the ECR repository
    Type: String
    Default: dev-repo


  InfraStackName:
    Description: Name of infrastructure Stack
    Type: String
    Default: ECS-FARGATE-INFRA

  GitHubOAuthToken:
    Type: String
    Description: "Please enter your personal GitHub access token"
    NoEcho: true

  GitHubOwner:
    Type: String
    Description: "Please enter your GitHub username"
    Default: Ahmedmagddi
    AllowedPattern: "[A-Za-z0-9-]+"

  GitHubRepo:
    Type: String
    Description: "Please enter your GitHub Repo name"
    Default: aws-ecs-fargate
    AllowedPattern: "[A-Za-z0-9-]+"

  # Please enter your new branch name while creating the stack if you'll
  # change it to another branch after forking
  GitHubBranch:
    Type: String
    Description: "Please enter infrastructure GitHub branch"
    Default: infrastructure
    AllowedPattern: "[A-Za-z0-9-]+"


Resources:

  PipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ecs-fargate-infrastructure
      VersioningConfiguration:
        Status: Enabled

  GetInfraTemplates:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Location:
          Ref: PipelineArtifactsBucket
        Type: S3
      Source:
        BuildSpec: ExtractS3Objects.yml
        Location:
          Fn::Sub: "${PipelineArtifactsBucket}/*.zip"
        Type: S3
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:3.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
        - Name: S3Bucket
          Value: !Sub ${PipelineArtifactsBucket}
        - Name: InfraFolder
          Value: !Ref InfraDir
      Name: !Join ['-', ['Get', 'Infra', 'Templates']]
      ServiceRole: !Ref CodeBuildServiceRole


  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactsBucket
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
      - Name: Source
        Actions:
        - Name: Source
          InputArtifacts: []
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Version: 1
            Provider: GitHub
          OutputArtifacts:
           - Name: SourceCode
          Configuration:
            Owner: !Ref GitHubOwner
            Repo: !Ref GitHubRepo
            Branch: !Ref GitHubBranch
            PollForSourceChanges: false
            OAuthToken: !Ref GitHubOAuthToken
          RunOrder: 1

      - Name: ExtractInfraTemplates
        Actions:
        - Name: CodeBuild
          InputArtifacts:
           - Name: SourceCode
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: '1'
            Provider: CodeBuild
          OutputArtifacts:
          - Name: BuildOutput
          Configuration:
           ProjectName: !Ref GetInfraTemplates
          RunOrder: 1

      - Name: Build-Infrastructure
        Actions:
        - Name: CloudFormationDeploy
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CloudFormation
            Version: '1'
          InputArtifacts:
            - Name: BuildOutput
          Configuration:
            ActionMode: CREATE_UPDATE
            Capabilities: CAPABILITY_NAMED_IAM
            RoleArn: !GetAtt CloudformationRole.Arn
            StackName: !Ref InfraStackName
            TemplatePath: !Sub "BuildOutput::infrastructure.yaml"
            ParameterOverrides: !Sub '{"S3TemplateKeyPrefix": "https://${PipelineArtifactsBucket}.s3.${AWS::Region}.amazonaws.com/${InfraDir}/", "ProjectName": "${ProjectName}", "ContainerName": "${ContainerName}", "RepositoryName": "${RepositoryName}"}'
          RunOrder: 1

  GithubWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubOAuthToken
      RegisterWithThirdParty: 'true'
      Filters:
      - JsonPath: "$.ref"
        MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref CodePipeline
      TargetAction: Source
      TargetPipelineVersion: !GetAtt CodePipeline.Version

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CloudformationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: cloudformation.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:ListObjects
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion

Outputs:
  S3Name:
    Value: !Sub "https://${PipelineArtifactsBucket}.s3.${AWS::Region}.amazonaws.com/${InfraDir}/"
