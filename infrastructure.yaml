Description: >
  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availabilty Zones. It deploys an Internet Gateway, with a default
  route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ),
  and default routes for them in the private subnets.
  It then deploys a highly available ECS cluster using an AutoScaling Group, with
  ECS hosts distributed across multiple Availability Zones.
  Finally, it deploys a pair of example ECS services from containers published in
  Amazon EC2 Container Registry (Amazon ECR).
  Author: Ahmed Magdy Abdelwahab

Parameters:

  S3TemplateKeyPrefix:
    Description: location of templates that are used to build the infrastructure
    Type: String


  ProjectName:
    Description: An environment name that will be used all over solution arch
    Type: String


  ContainerName:
    Description: Please enter a container name for your Application
    Type: String


  RepositoryName:
    Description: The name of the ECR repository
    Type: String


Resources:

  ImageRepository:
    Type: AWS::CloudFormation::Stack
    Properties:
        TemplateURL: !Sub ${S3TemplateKeyPrefix}image-repository.yaml
        Parameters:
            RepositoryName: !Ref RepositoryName

  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${S3TemplateKeyPrefix}vpc.yaml
      Parameters:
        ProjectName: !Ref ProjectName
        VpcCIDR: 10.180.0.0/16
        PublicSubnet1CIDR: 10.180.10.0/24
        PublicSubnet2CIDR: 10.180.20.0/24
        PrivateSubnet1CIDR: 10.180.30.0/24
        PrivateSubnet2CIDR: 10.180.40.0/24

  SecurityGroups:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${S3TemplateKeyPrefix}security-groups.yaml
      Parameters:
        ProjectName: !Ref ProjectName
        VPC: !GetAtt VPC.Outputs.VPC

  ALB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${S3TemplateKeyPrefix}load-balancers.yaml
      Parameters:
        ProjectName: !Ref ProjectName
        VPC: !GetAtt VPC.Outputs.VPC
        Subnets: !GetAtt VPC.Outputs.PublicSubnets
        SecurityGroup: !GetAtt SecurityGroups.Outputs.LoadBalancerSecurityGroup

  EcsCluster:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub ${S3TemplateKeyPrefix}ecs-cluster.yaml
            Parameters:
                Subnets: !GetAtt VPC.Outputs.PrivateSubnets
                ProjectName: !Ref ProjectName
                VPC: !GetAtt VPC.Outputs.VPC
                PreProdListener: !GetAtt ALB.Outputs.PreProdListener
                ProdListener: !GetAtt ALB.Outputs.ProdListener
                ECSServicesSecurityGroup: !GetAtt SecurityGroups.Outputs.ECSHostSecurityGroup
                ContainerName: !Ref ContainerName

Outputs:
  CName:
    Description: "Container Name to be exported to APP Stack"
    Value: !Join ['-', [!Ref ContainerName, 'container']]
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-ContainerID'

  LBURL:
    Description: "ALB URL to be exported to APP Stack"
    Value: !GetAtt ALB.Outputs.LoadBalancerUrl
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-ALBURL'

  AlfaServiceArn:
    Description: "Alfa service arn to be exported to APP Stack"
    Value: !GetAtt EcsCluster.Outputs.AlfaServiceArn
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-AlfaServiceArn'

  BetaServiceArn:
    Description: "Beta service arn to be exported to APP Stack"
    Value: !GetAtt EcsCluster.Outputs.BetaServiceArn
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-BetaServiceArn'

  ClusterName:
    Description: "ECS Cluster Name to be exported to APP Stack"
    Value: !GetAtt EcsCluster.Outputs.EcsClusterName
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-ClusterName'

  RepoName:
    Description: "Export Repo Name to APP Stack"
    Value: !Ref RepositoryName
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-RepoName'
