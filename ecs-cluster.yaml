Description: >
    This is a template to build ECS Fargate cluster.

Parameters:

    VPC:
        Type: AWS::EC2::VPC::Id

    Listener:
        Type: String

    EnvironmentName:
        Type: String

    Subnets:
        Type: List<AWS::EC2::Subnet::Id>

    ECSServicesSecurityGroup:
        Type: AWS::EC2::SecurityGroup::Id

    ContainerName:
        Type: String

Resources:

    Cluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Sub ${EnvironmentName}-Cluster

    Service:
        Type: AWS::ECS::Service
        DependsOn: ListenerRule
        Properties:
            Cluster: !Ref Cluster
            LaunchType: FARGATE
            DesiredCount: 2
            DeploymentConfiguration:
                MaximumPercent: 200
                MinimumHealthyPercent: 100
            TaskDefinition: !Ref TaskDefinition
            NetworkConfiguration:
                AwsvpcConfiguration:
                    Subnets: !Ref Subnets
                    SecurityGroups:
                        - !Ref ECSServicesSecurityGroup
            LoadBalancers:
                - ContainerName: !Join ['-', [!Ref ContainerName, 'container']]
                  ContainerPort: 80
                  TargetGroupArn: !Ref TargetGroup

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            TaskRoleArn: !GetAtt TaskExecutionRole.Arn
            ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
            Cpu: 256
            Memory: 512
            Family: !Ref EnvironmentName
            NetworkMode: awsvpc
            RequiresCompatibilities:
                - FARGATE
            ContainerDefinitions:
                - Name: !Join ['-', [!Ref EnvironmentName, 'container']]
                  Environment:
                      - Name: PORT
                        Value: 80
                  Essential: true
                  Image: docker.io/ahmedmagdy29/introduction:v2
                  PortMappings:
                      - ContainerPort: 80
                  LogConfiguration:
                      LogDriver: awslogs
                      Options:
                          awslogs-group: !Ref EnvironmentName
                          awslogs-region: !Ref AWS::Region
                          awslogs-stream-prefix: ecs

    LogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Ref EnvironmentName
            RetentionInDays: 365

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            Matcher:
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /index.html
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            TargetType: ip
            TargetGroupAttributes:
                - Key: deregistration_delay.timeout_seconds
                  Value: '60'
                - Key: load_balancing.algorithm.type
                  Value: round_robin

    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref Listener
            Priority: 1
            Conditions:
                - Field: path-pattern
                  Values:
                    - "*"
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

    TaskExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Principal:
                      Service:
                      - ecs-tasks.amazonaws.com
                  Action:
                  - sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

Outputs:

    EcsServiceArn:
        Description: A reference to the created ECS service ARN
        Value: !Ref Service

    EcsClusterName:
        Description: A reference to the created ECS service ARN
        Value: !Ref Cluster

    EcsTaskExecutionRoleArn:
        Description: A reference to the created IAM role ARN
        Value: !Ref TaskExecutionRole
